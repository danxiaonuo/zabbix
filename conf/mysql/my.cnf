# ****** MySQL应用端设置 ******  
[client]
# MySQL端口
port=3306
# MySQL通信
socket = /var/lib/mysql/mysqld.sock
# MySQL字符集
default_character_set=utf8mb4

[mysql]
# 提示信息
prompt = "\u@mysqldb \R:\m:\s [\d]> "
# 自动补全
auto_rehash
# MySQL字符集
default_character_set=utf8mb4

# ****** MySQL服务端设置 ******
[mysqld]
## 基础配置
# 表示是本机的序号为1,一般来讲就是master的意思
server_id = 1
# MySQL端口号
port = 3306
# MySQL用户
user = mysql
# 全局地址
bind_address= 0.0.0.0
# 默认安全验证插件
default_authentication_plugin = mysql_native_password
# MySQL安装目录
basedir = /var/lib/mysql
# MySQL数据目录
datadir = /var/lib/mysql
# MySQL通信
socket = /var/lib/mysql/mysqld.sock
# MySQL进程ID
pid_file = /var/lib/mysql/mysqld.pid
# 默认数据引擎
default_storage_engine = InnoDB
# 禁用数据引擎
# disabled_storage_engines = "MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY"
# MySQL字符集
character_set_client_handshake = FALSE
character_set_server=utf8mb4
collation_server=utf8mb4_unicode_ci
init_connect='SET NAMES utf8mb4'
# 开启查询缓存
explicit_defaults_for_timestamp = 1
# 防止从库数据破坏
# skip_slave_start = 1
# 禁用DNS解析
skip_name_resolve = 1
# 跳过外部锁定
skip_external_locking = 1
# 跳过SSL配置
skip_ssl = 1
# 跳过权限验证
# skip_grant_tables = 1
# 时区设置
default_time_zone = '+8:00'
# MySQL不区分大小写
lower_case_table_names = 1
# 设定默认的事务隔离级别
transaction_isolation = READ-COMMITTED
# MySQL事件调度器
event_scheduler = 1
# 分组的最大长度
group_concat_max_len = -1

## 连接设置
# 连接超时时间
connect_timeout= 300
# MySQL连接数的上限
max_connections = 100000
# 每个客户端连接最大的错误允许数量
max_connect_errors = 1000000
# 服务器关闭交互式连接前等待活动的秒数
interactive_timeout = 2880000
# 服务器关闭非交互连接之前等待活动的秒数
wait_timeout = 2880000

## 会话内存配置
# 读入缓冲区大小
read_buffer_size = 32M
# 随机读取缓冲区大小
read_rnd_buffer_size = 32M
# 每个线程排序的缓冲大小
sort_buffer_size = 32M
# 关联表缓存大小
join_buffer_size = 32M
# 内部(内存中)临时表的最大大小
tmp_table_size = 96M
# 独立的内存表所允许的最大容量
max_heap_table_size = 96M
# 服务器发送和接受的最大包长度
max_allowed_packet = 512M

## 缓存配置
# 用于索引的缓冲区大小
key_buffer_size = 1G
# 内存中可打开的表结构数量
table_definition_cache = 65535
# 所有线程打开表的数目
table_open_cache = 65535
# 所有线程打开的表的数量
table_open_cache_instances = 1000
# 线程池大小
thread_cache_size = 16384
# 打开文件描述符
open_files_limit = 65535
# binlog记录SQL状态所持有的缓存大小
binlog_cache_size = 1G
# binlog记录保留天数
expire_logs_days = 3

## 日志配置
# 启用二进制日志文件
log_bin = /var/lib/mysql/mysql-bin
# binlog日志格式
binlog_format = MIXED
# 值为1表示主机每次提交事务的时候把二进制日志的内容同步到磁盘上
sync_binlog = 0
# 加载数值时的偏移值(从节点设置2)
auto_increment_offset = 1
# 自增量每次增加的值(从节点设置2)
auto_increment_increment = 1
# 只读模式(从节点设置)
read_only = 0
super_read_only = OFF
# 及时同步master文件(从节点设置)
sync_master_info = 1    
# 及时同步relay_log文件(从节点设置)              
sync_relay_log = 1  
# 及时同步relay_log_info文件(从节点设置）                  
sync_relay_log_info = 1 
# 同步超时时间
slave_net_timeout = 300
# 当出现错误的时候会使 MySQL 在写 binlog 遇到严重错误时直接退出
binlog_error_action = ABORT_SERVER
# binlog日志大小
max_binlog_size = 2G
# 获取历史的 SQL 执行记录
binlog_rows_query_log_events = 1
# binlog日志保留天数
binlog_expire_logs_seconds = 604800
# 限制存储函数的创建、修改、调用
log_bin_trust_function_creators = 1
# 配置从库上的更新操作是否写二进制文件
log_slave_updates = 1
# 启用同步日志文件
relay_log = /var/lib/mysql/slave-relay-bin
# 定义relay_log_index的文件名
relay_log_index = /var/lib/mysql/slave-relay-bin.index
# 自动修复同步日志
relay_log_recovery = 1
# MySQL错误日志路径
log_error = /var/lib/mysql/mysql_error.log
# 慢查询日志路径
slow_query_log_file= /var/lib/mysql/slow.log
# 不同步的数据库
# binlog_ignore_db = test
# 同步的数据库
# binlog_do_db = mysql
# binlog_do_db = information_schema
# binlog_do_db = performance_schema
# 启动慢查询日志
slow_query_log = 1
# 慢查询设定的时间
long_query_time = 0.1
# 将所有没有使用带索引的查询语句全部写到慢查询日志中
log_queries_not_using_indexes = 1
# 开启记录管理型慢SQL
log_slow_admin_statements = 1
# 保存查询的日志
log_slow_slave_statements = 1
# 每分钟允许记录到slow log的且未使用索引的SQL语句次数
log_throttle_queries_not_using_indexes = 60
# 开启日志时间戳为系统时间
log_timestamps = SYSTEM
# 错误信息、告警信息和通知信息
log_error_verbosity = 1 
# 输出的额外字段
log_slow_extra = 1
# 最小检查行数限制
min_examined_row_limit = 100
# binlog使用的最大缓存内存大小
max_binlog_cache_size = 2G
# 自动跳过错误信息
# slave_skip_errors = ddl_exist_errors
slave_skip_errors = 1032,1062
# binlog校验规则
binlog_checksum = CRC32

# 性能设置
# 事务锁超时时间
lock_wait_timeout = 3600
# 操作系统在监听队列中所能保持的连接数
back_log = 65535
# 每个线程的堆栈大小
thread_stack = 512K
# 使用特殊的类似树的cache来使得突发插入
bulk_insert_buffer_size = 256M

## InnoDB 配置
# 每个数据库的每个表都会生成一个数据空间
innodb_file_per_table = 1
# InnoDB 将数据保存在一个或者多个数据文件中成为表空间
innodb_data_file_path = ibdata1:12M:autoextend
# 日志写入日志文件在每次提交后,但是日志文件只有大约每秒才会刷新到磁盘上
innodb_flush_log_at_trx_commit = 2
# Innodb缓冲区大小
innodb_buffer_pool_size = 1G
# InnoDB缓存池被划分到一个区域
innodb_buffer_pool_instances = 8
# 指定在MySQL服务器启动时,InnoDB缓冲池通过加载之前保存的相同页面自动预热
innodb_buffer_pool_load_at_startup = 1
# 指定在MySQL服务器关闭时是否记录在InnoDB缓冲池中缓存的页面,以便在下次重新启动时缩短预热过程
innodb_buffer_pool_dump_at_shutdown = 1
# 恢复Buffer Pool中多少数据
innodb_buffer_pool_dump_pct = 25
# 事务等待获取资源等待的最长时间
innodb_lock_wait_timeout = 300
# 从缓冲区刷新脏页时,一次刷新脏页的数量
innodb_io_capacity = 4000
# InnoDB在这种情况下由后台任务执行的最大IOPS数
innodb_io_capacity_max = 8000
# 在InnoDB 缓冲池中最大允许的脏页面的比例
innodb_max_dirty_pages_pct = 90
# 控制innodb 数据文件和redo log的打开、刷写模式。有三个值：fdatasync(默认),O_DSYNC,O_DIRECT。
innodb_flush_method = O_DIRECT
# 控制buffer pool刷脏页时是否把脏页邻近的其他脏页一起刷到磁盘
innodb_flush_neighbors = 0
# InnoDB 日志文件的路径
innodb_log_group_home_dir = /var/lib/mysql
# 在日志组中每个日志文件的大小
innodb_log_file_size = 2G
# 在日志组中的文件总数.
innodb_log_files_in_group = 3
# Innodb日志缓冲区大小
innodb_log_buffer_size = 128M
# 使用单独的清除线程收回数据
innodb_purge_threads = 4
# InnoDB使用后台线程处理数据页上读写I/O（输入输出）请求的数量
innodb_write_io_threads = 8
innodb_read_io_threads = 8
# 限制并发线程的数量
innodb_thread_concurrency = 0
# 能否将死锁信息保存到日志中
innodb_print_all_deadlocks = 1
# 开启InnoDB严格检查模式
innodb_strict_mode = 1
# INNODB排序缓冲分配的内存大小
innodb_sort_buffer_size = 67108864
# 配置InnoDB优化器统计信息的采样页数参数
innodb_stats_persistent_sample_pages = 64
# 自增锁模式
innodb_autoinc_lock_mode = 2
# 控制在用于在Online DDL操作时的一个临时的日志文件的上限值大小
innodb_online_alter_log_max_size = 4G
# InnoDB打开的文件文件描述符
innodb_open_files = 65535
# 优化磁盘的IO
innodb_lru_scan_depth = 4000
# 超时后回滚整个事务
innodb_rollback_on_timeout = 1
# 打印DDL日志
innodb_print_ddl_logs = 1
# 启用InnoDB的status file,便于管理员查看以及监控
innodb_status_file = 1
# InnoDB标准监控输出
innodb_status_output = 0
# 启用InnoDB锁监控
innodb_status_output_locks = 1
# 临时表空间文件大小
innodb_temp_data_file_path = ibtmp1:12M:autoextend:max:50G
# 关闭NUMA的方案
innodb_numa_interleave = 1

## InnoDB 监控配置
innodb_monitor_enable = "module_innodb"
innodb_monitor_enable = "module_server"
innodb_monitor_enable = "module_dml"
innodb_monitor_enable = "module_ddl"
innodb_monitor_enable = "module_trx"
innodb_monitor_enable = "module_os"
innodb_monitor_enable = "module_purge"
innodb_monitor_enable = "module_log"
innodb_monitor_enable = "module_lock"
innodb_monitor_enable = "module_buffer"
innodb_monitor_enable = "module_index"
innodb_monitor_enable = "module_ibuf_system"
innodb_monitor_enable = "module_buffer_page"
innodb_monitor_enable = "module_adaptive_hash"

# 为避免各种安全风险，建议禁用符号链接
symbolic_links = 0

# *** MyISAM 相关选项 ***
# MyISAM 使用特殊的类似树的cache来使得突发插入
bulk_insert_buffer_size = 256M
# 到一个空表中引起重建索引时被分配.
myisam_sort_buffer_size = 256M
# MySQL重建索引时所允许的最大临时文件的大小
myisam_max_sort_file_size = 10G
# 如果一个表拥有超过一个索引, MyISAM 可以通过并行排序使用超过一个线程去修复他们.
myisam_repair_threads = 1
# 自动检查和修复没有适当关闭的 MyISAM 表.
#myisam_recover
# 默认关闭Federated
skip-federated

## Undo 日志配置
# 开启在线回收（收缩）undo log日志文件
innodb_undo_log_truncate = 1
# 当超过这个阀值,会触发truncate回收（收缩）动作
innodb_max_undo_log_size = 1G

## GTID 配置
# 开启GTID,必须开启
gtid_mode = ON
# 强制GTID的一致性
enforce_gtid_consistency = 1
# 回收二进制日志
binlog_gtid_simple_recovery = 1

## Semi 同步配置
# loose_plugin_load_add = "rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
# MySQL开启主的半同步复制
# loose_rpl_semi_sync_master_enabled = 0
# MySQL开启从的半同步复制 
# loose_rpl_semi_sync_slave_enabled = 0
# 超时多少秒,切回异步 
# loose_rpl_semi_sync_master_timeout = 30000
# 至少收到1个slave发会的ack
# loose_rpl_semi_sync_master_wait_for_slave_count = 1
# 在没有slave时,是否选择等待。
# loose_rpl_semi_sync_master_wait_no_slave = 0

# 密码验证插件
# 加载插件
# loose_plugin_load_add = validate_password.so
# 密码验证类型
# loose_validate_password_policy = LOW
# loose_validate_password_policy = MEDIUM

## 同步配置
# 并行复制
slave_parallel_type = LOGICAL_CLOCK
# worker线程
slave_parallel_workers = 64
# 事务的依赖关系由写集产生，任何事务更新的写集没有交集就可以并发。
binlog_transaction_dependency_tracking = WRITESET
# 事务提交的顺序
slave_preserve_commit_order = 1
# 允许从库最多经过多少毫秒才执行checkpoint
slave_checkpoint_period = 2

# pfs 设置
# 收集数据库服务器性能
performance_schema = 1
# 设置采集的instrument
performance_schema_instrument = 'wait/lock/metadata/sql/mdl=ON'
performance_schema_instrument = 'memory/%=COUNTED'

# 组复制设置
# 克隆插件
# loose_plugin_load_add = 'mysql_clone.so'
# loose_plugin_load_add = 'group_replication.so'
# 记录事务的算法,官网建议设置该参数使用 XXHASH64 算法
# transaction_write_set_extraction = XXHASH64
# 相当于此GROUP的名字,是UUID值,不能和集群内其他GTID值的UUID混用,可用uuidgen来生成一个新的,
# 主要是用来区分整个内网里边的各个不同的GROUP,而且也是这个group内的GTID值的UUID
# loose-group_replication_group_name = '61b77f6f-e13f-4091-b4f5-1d7f83932d51'
# IP地址白名单,默认只添加127.0.0.1,不会允许来自外部主机的连接,按需安全设置
# loose-group_replication_ip_allowlist = '10.0.88.0/24,10.0.25.0/24,10.0.9.0/24'
# 强制MySQL Server启动失败
# loose_group_replication = FORCE_PLUS_PERMANENT
# 是否随服务器启动而自动启动组复制,不建议直接启动,怕故障恢复时有扰乱数据准确性的特殊情况
# loose-group_replication_start_on_boot = ON
# 本地MGR的IP地址和端口,host:port,是MGR的端口,不是数据库的端口
# loose-group_replication_local_address = '10.0.9.64:33061'
# 需要接受本MGR实例控制的服务器IP地址和端口,是MGR的端口,不是数据库的端口
# loose-group_replication_group_seeds = '10.0.9.64:33061,10.0.9.65:33061'
# 开启引导模式,添加组成员，用于第一次搭建MGR或重建MGR的时候使用,只需要在集群内的其中一台开启,
# loose-group_replication_bootstrap_group = ON
# 自动加入主节点
# loose-group_replication_recovery_get_public_key = ON
# 是否启动单主模式，如果启动，则本实例是主库，提供读写，其他实例仅提供读,如果为off就是多主模式了
# loose-group_replication_single_primary_mode = OFF
# 多主模式下,强制检查每一个实例是否允许该操作,如果不是多主,可以关闭
# loose-group_replication_enforce_update_everywhere_checks = ON
# 当退出MGR后,把该实例设置为read_only,避免误操作写入数据
# loose-group_replication_exit_state_action=READ_ONLY
# 禁用流控机制
# loose-group_replication_flow_control_mode = "DISABLED"
# 权重选择
# loose-group_replication_member_weight = 50


[mysqldump]
#不要在将内存中的整个结果写入磁盘之前缓存
quick
# 服务器发送和接受的最大包长度
max_allowed_packet = 512M

[mysqld_safe]
#增加每个进程的可打开文件数量.
open_files_limit = 65535
